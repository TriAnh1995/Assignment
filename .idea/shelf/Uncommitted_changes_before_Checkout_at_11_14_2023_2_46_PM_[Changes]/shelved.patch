Index: api/internal/repository/check_friendship.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package repository\r\n\r\nimport (\r\n\t\"assignment/internal/repository/orm\"\r\n\t\"context\"\r\n\r\n\t\"github.com/volatiletech/sqlboiler/v4/queries/qm\"\r\n)\r\n\r\nfunc (i RepoImplement) CheckFriendship(ctx context.Context, userEmails []string) (bool, error) {\r\n\t// use the Friendship model generated by SQLBoiler\r\n\texist, err := orm.Friendships(\r\n\t\tqm.Where(\"(user_email_1 = ? AND user_email_2 = ?) OR (user_email_1 = ? AND user_email_2 = ?)\",\r\n\t\t\tuserEmails[0], userEmails[1], userEmails[1], userEmails[0]),\r\n\t).Exists(ctx, i.pgConn)\r\n\treturn exist, err\r\n}\r\n
===================================================================
diff --git a/api/internal/repository/check_friendship.go b/api/internal/repository/check_friendship.go
--- a/api/internal/repository/check_friendship.go	
+++ b/api/internal/repository/check_friendship.go	
@@ -7,8 +7,8 @@
 	"github.com/volatiletech/sqlboiler/v4/queries/qm"
 )
 
+// CheckFriendship check if two emails already in friendship database
 func (i RepoImplement) CheckFriendship(ctx context.Context, userEmails []string) (bool, error) {
-	// use the Friendship model generated by SQLBoiler
 	exist, err := orm.Friendships(
 		qm.Where("(user_email_1 = ? AND user_email_2 = ?) OR (user_email_1 = ? AND user_email_2 = ?)",
 			userEmails[0], userEmails[1], userEmails[1], userEmails[0]),
