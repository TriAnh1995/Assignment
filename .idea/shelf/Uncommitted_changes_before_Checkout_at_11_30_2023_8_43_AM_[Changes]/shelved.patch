Index: api/internal/repository/get_friends_list.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package repository\r\n\r\nimport (\r\n\t\"assignment/internal/repository/orm\"\r\n\t\"context\"\r\n)\r\n\r\n// GetFriendsList retrieve a list of friend names a user have\r\nfunc (i RepoImplement) GetFriendsList(ctx context.Context, userEmail string) ([]string, error) {\r\n\t//Create a slice to store the list of friends for the userEmail.\r\n\tvar listOfFriends []string\r\n\t//Use the 'All' method to extract all the rows that contain the userEmail in the first column.\r\n\tfriends1, err := orm.Friendships(\r\n\t\torm.FriendshipWhere.UserEmail1.EQ(userEmail)).All(ctx, i.pgConn)\r\n\tif err != nil {\r\n\t\treturn []string{}, err\r\n\t}\r\n\t//Store the emails of userEmail's friends, which are located in the second column, in the list.\r\n\tfor _, friend := range friends1 {\r\n\t\tlistOfFriends = append(listOfFriends, friend.UserEmail2)\r\n\t}\r\n\t//Repeat the process for the other case where the userEmail is contained in the second column.\r\n\tfriends2, err := orm.Friendships(\r\n\t\torm.FriendshipWhere.UserEmail2.EQ(userEmail)).All(ctx, i.pgConn)\r\n\tif err != nil {\r\n\t\treturn []string{}, err\r\n\t}\r\n\tfor _, friend := range friends2 {\r\n\t\tlistOfFriends = append(listOfFriends, friend.UserEmail1)\r\n\t}\r\n\r\n\treturn listOfFriends, err\r\n}\r\n
===================================================================
diff --git a/api/internal/repository/get_friends_list.go b/api/internal/repository/get_friends_list.go
--- a/api/internal/repository/get_friends_list.go	
+++ b/api/internal/repository/get_friends_list.go	
@@ -9,16 +9,19 @@
 func (i RepoImplement) GetFriendsList(ctx context.Context, userEmail string) ([]string, error) {
 	//Create a slice to store the list of friends for the userEmail.
 	var listOfFriends []string
+
 	//Use the 'All' method to extract all the rows that contain the userEmail in the first column.
 	friends1, err := orm.Friendships(
 		orm.FriendshipWhere.UserEmail1.EQ(userEmail)).All(ctx, i.pgConn)
 	if err != nil {
 		return []string{}, err
 	}
+
 	//Store the emails of userEmail's friends, which are located in the second column, in the list.
 	for _, friend := range friends1 {
 		listOfFriends = append(listOfFriends, friend.UserEmail2)
 	}
+
 	//Repeat the process for the other case where the userEmail is contained in the second column.
 	friends2, err := orm.Friendships(
 		orm.FriendshipWhere.UserEmail2.EQ(userEmail)).All(ctx, i.pgConn)
