Index: api/cmd/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\t\"assignment/cmd/routes\"\r\n\t\"assignment/internal/controller\"\r\n\t\"assignment/internal/handler\"\r\n\t\"assignment/internal/repository\"\r\n\t\"database/sql\"\r\n\t\"fmt\"\r\n\t\"log\"\r\n\t\"os\"\r\n\r\n\t\"github.com/gin-gonic/gin\"\r\n\t_ \"github.com/lib/pq\"\r\n\t\"gorm.io/driver/postgres\"\r\n\t\"gorm.io/gorm\"\r\n)\r\n\r\nfunc main() {\r\n\tprintln(\"Hello world\")\r\n\r\n\tos.Setenv(\"PORT\", \"3000\")\r\n\tpgConn, err := ConnectToDatabase()\r\n\tif err != nil {\r\n\t\tlog.Fatal(\"Error when connect DB\", err)\r\n\t}\r\n\tgormDB, err = GormConnect(pgConn)\r\n\tif err != nil {\r\n\t\tlog.Fatal(\"Error when begin Gorm\", err)\r\n\t\treturn\r\n\t}\r\n\t// init repo, controller, handler\r\n\trepo := repository.New(pgConn)\r\n\tctrl := controller.New(repo, gormDB)\r\n\trtr := routes.New(\r\n\t\thandler.New(ctrl),\r\n\t)\r\n\r\n\tr := gin.Default()\r\n\trtr.Routes(r)\r\n\r\n\tr.Run(fmt.Sprintf(\":%s\", os.Getenv(\"PORT\")))\r\n}\r\n\r\nvar db *sql.DB\r\nvar gormDB *gorm.DB\r\n\r\nfunc ConnectToDatabase() (*sql.DB, error) {\r\n\tif db == nil {\r\n\t\tvar err error\r\n\t\tdb, err = sql.Open(\"postgres\", fmt.Sprintf(\r\n\t\t\t\"postgresql://%s:%s@%s/%s?sslmode=disable\",\r\n\t\t\t\"test\", \"\",\r\n\t\t\t\"@localhost:5432\", \"test\"))\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\t}\r\n\tif err := db.Ping(); err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\treturn db, nil\r\n}\r\n\r\nfunc GormConnect(sqlDB *sql.DB) (*gorm.DB, error) {\r\n\tif gormDB == nil {\r\n\t\tvar err error\r\n\t\tgormDB, err = gorm.Open(postgres.New(postgres.Config{\r\n\t\t\tConn: sqlDB,\r\n\t\t}), &gorm.Config{})\r\n\t\tif err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\t}\r\n\treturn gormDB, nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/cmd/main.go b/api/cmd/main.go
--- a/api/cmd/main.go	
+++ b/api/cmd/main.go	
@@ -62,11 +62,11 @@
 	return db, nil
 }
 
-func GormConnect(sqlDB *sql.DB) (*gorm.DB, error) {
+func GormConnect(pgConn *sql.DB) (*gorm.DB, error) {
 	if gormDB == nil {
 		var err error
 		gormDB, err = gorm.Open(postgres.New(postgres.Config{
-			Conn: sqlDB,
+			Conn: pgConn,
 		}), &gorm.Config{})
 		if err != nil {
 			return nil, err
Index: api/internal/controller/add_friend.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller\r\n\r\nimport (\r\n\t\"context\"\r\n\r\n\t\"gorm.io/gorm\"\r\n)\r\n\r\nfunc (i CTRLImplement) AddFriend(ctx context.Context, userEmails []string) error {\r\n\terr := i.gormDB.Transaction(func(*gorm.DB) error {\r\n\t\tfor _, userEmail := range userEmails {\r\n\t\t\tcheckEmailExist, err := i.repo.CheckUserByEmail(ctx, userEmail)\r\n\t\t\tif err != nil {\r\n\t\t\t\treturn ServerError\r\n\t\t\t}\r\n\t\t\tif !checkEmailExist {\r\n\t\t\t\treturn UserNotFound\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcheckFriendshipExist, err := i.repo.CheckFriendship(ctx, userEmails)\r\n\t\tif err != nil {\r\n\t\t\treturn ServerError\r\n\t\t}\r\n\t\tif checkFriendshipExist {\r\n\t\t\treturn FriendshipExisted\r\n\t\t}\r\n\r\n\t\tif err = i.repo.AddFriendship(ctx, userEmails); err != nil {\r\n\t\t\treturn ServerError\r\n\t\t}\r\n\t\tif err = i.gormDB.Commit().Error; err != nil {\r\n\t\t\treturn ServerError\r\n\t\t}\r\n\t\treturn nil\r\n\t})\r\n\treturn err\r\n}\r\n
===================================================================
diff --git a/api/internal/controller/add_friend.go b/api/internal/controller/add_friend.go
--- a/api/internal/controller/add_friend.go	
+++ b/api/internal/controller/add_friend.go	
@@ -17,7 +17,6 @@
 				return UserNotFound
 			}
 		}
-
 		checkFriendshipExist, err := i.repo.CheckFriendship(ctx, userEmails)
 		if err != nil {
 			return ServerError
@@ -29,9 +28,6 @@
 		if err = i.repo.AddFriendship(ctx, userEmails); err != nil {
 			return ServerError
 		}
-		if err = i.gormDB.Commit().Error; err != nil {
-			return ServerError
-		}
 		return nil
 	})
 	return err
Index: api/internal/repository/check_friendship.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package repository\r\n\r\nimport (\r\n\t\"assignment/internal/repository/orm\"\r\n\t\"context\"\r\n\r\n\t\"github.com/volatiletech/sqlboiler/v4/queries/qm\"\r\n)\r\n\r\nfunc (i RepoImplement) CheckFriendship(ctx context.Context, userEmails []string) (bool, error) {\r\n\r\n\t// use the Friendship model generated by SQLBoiler\r\n\texist, err := orm.Friendships(\r\n\t\tqm.Where(\"(user_email_1 = ? AND user_email_2 = ?) OR (user_email_1 = ? AND user_email_2 = ?)\",\r\n\t\t\tuserEmails[0], userEmails[1], userEmails[1], userEmails[0]),\r\n\t).Exists(ctx, i.pgConn)\r\n\treturn exist, err\r\n\r\n}\r\n
===================================================================
diff --git a/api/internal/repository/check_friendship.go b/api/internal/repository/check_friendship.go
--- a/api/internal/repository/check_friendship.go	
+++ b/api/internal/repository/check_friendship.go	
@@ -8,12 +8,10 @@
 )
 
 func (i RepoImplement) CheckFriendship(ctx context.Context, userEmails []string) (bool, error) {
-
 	// use the Friendship model generated by SQLBoiler
 	exist, err := orm.Friendships(
 		qm.Where("(user_email_1 = ? AND user_email_2 = ?) OR (user_email_1 = ? AND user_email_2 = ?)",
 			userEmails[0], userEmails[1], userEmails[1], userEmails[0]),
 	).Exists(ctx, i.pgConn)
 	return exist, err
-
 }
Index: api/internal/repository/add_friendship.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package repository\r\n\r\nimport (\r\n\t\"assignment/internal/repository/orm\"\r\n\t\"context\"\r\n\r\n\t\"github.com/volatiletech/sqlboiler/v4/boil\"\r\n)\r\n\r\n// AddFriendship insert two usernames to friendship table in db\r\nfunc (i RepoImplement) AddFriendship(ctx context.Context, userEmails []string) error {\r\n\r\n\tcreateFriendShip := &orm.Friendship{\r\n\t\tUserEmail1: userEmails[0],\r\n\t\tUserEmail2: userEmails[1],\r\n\t}\r\n\r\n\terr := createFriendShip.Insert(ctx, i.pgConn, boil.Infer())\r\n\treturn err\r\n}\r\n
===================================================================
diff --git a/api/internal/repository/add_friendship.go b/api/internal/repository/add_friendship.go
--- a/api/internal/repository/add_friendship.go	
+++ b/api/internal/repository/add_friendship.go	
@@ -9,12 +9,10 @@
 
 // AddFriendship insert two usernames to friendship table in db
 func (i RepoImplement) AddFriendship(ctx context.Context, userEmails []string) error {
-
 	createFriendShip := &orm.Friendship{
 		UserEmail1: userEmails[0],
 		UserEmail2: userEmails[1],
 	}
-
 	err := createFriendShip.Insert(ctx, i.pgConn, boil.Infer())
 	return err
 }
